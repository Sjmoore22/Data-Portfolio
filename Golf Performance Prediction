# Golf Performance Prediction - Deepnote Notebook

## 📌 Objective
# This notebook analyzes golf player performance using historical tournament data.
# It applies exploratory data analysis (EDA) and regression modeling to predict performance.

## 🛠 Tools Used
# - pandas, numpy: Data manipulation
# - seaborn, matplotlib: Data visualization
# - scikit-learn: Machine learning
# - Deepnote: Interactive execution

# Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load Dataset (Replace with actual dataset path or import method)
data = pd.read_csv("golf_tournament_data.csv")

# Display first few rows
data.head()

## 📊 Exploratory Data Analysis
# Check missing values
data.isnull().sum()

# Summary statistics
data.describe()

# Visualizing correlation between features
plt.figure(figsize=(10,6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Feature Correlation Heatmap")
plt.show()

## 🔍 Feature Selection & Data Preparation
# Selecting relevant features for performance prediction
features = ['driving_accuracy', 'greens_in_regulation', 'putts_per_round', 'scrambling']
target = 'final_score'

X = data[features]
y = data[target]

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

## 🏌️‍♂️ Regression Model for Performance Prediction
# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared Score: {r2:.2f}")

## 📈 Insights & Visualization
# Comparing actual vs predicted scores
plt.figure(figsize=(8,5))
plt.scatter(y_test, y_pred, alpha=0.6, color='blue')
plt.xlabel("Actual Scores")
plt.ylabel("Predicted Scores")
plt.title("Actual vs Predicted Golf Scores")
plt.show()

# Conclusion: Key features affecting golf performance
feature_importance = pd.DataFrame({'Feature': features, 'Coefficient': model.coef_})
print(feature_importance.sort_values(by='Coefficient', ascending=False))

## 🚀 Next Steps
# - Tune the model using feature engineering and hyperparameter tuning.
# - Try non-linear models like Random Forest or Gradient Boosting.
# - Extend to predictive analytics for upcoming tournaments.

# Save notebook for GitHub export
# (Deepnote users can directly link this to a GitHub repository)
